
<template id="room">
    <div class="max-height">

        <minwindow v-bind:is-open="isShowPaswdWindow">
            <div class="container">
                <div class="row">
                    <div class="col-sm-2">
                    </div>
                    <div class="col-sm">
                        <h5 class="text-center"><b>Введите пароль</b></h5>
                    </div>
                    <div class="col-sm-2">
                    </div>
                </div>
                <div class="row mrg-10">
                    <div class="col-sm-2">
                    </div>
                    <div class="col-sm">
                        <div class="min-tbox min-tbox-gold mrg-10">
                            <input v-model="passwd" type="text" placeholder="***" />
                        </div>
                    </div>
                    <div class="col-sm-2">
                    </div>
                </div>
                <div class="row mrg-10">
                    <div class="col-sm">
                    </div>
                    <div class="col-sm">
                        <button v-on:click="onOkPaswdWindow" class="min-btn min-btn-blue mrg-10 horizontal-center">
                            Окей
                            <div class="cross"></div>
                        </button>
                    </div>
                    <div class="col-sm">
                    </div>
                </div>
            </div>
        </minwindow>

        <div class="container vertical-center max-height" style="max-width: none">
            <div class="row" style="height: 10%">
                игра {{gameId}} {{gameInfo}}
            </div>

            <div class="row" style="height: 90%">
                <div class="col-sm-2 left-user-panel test">

                    <div v-for="item in users">
                        <img v-bind:src="item.userAva == null ? '/images/ava.png' : item.userAva">
                        <label>{{ item.name }}</label>
                    </div>

                </div>
                <div class="col-sm">
                    <transition name="component-fade" mode="out-in">
                        <component v-bind:is="currentState"></component>
                    </transition>
                </div>
            </div>
        </div>

    </div>
</template>


<template id="waiting">
    <div class="max-height">

        {{$parent.isAdmin}}

        <button v-on:click="$parent.onStartGameBtn" v-if="$parent.isAdmin" class="min-btn min-btn-gold">
            Начать игру
            <div class="cross"></div>
        </button>

        <h1>Правила игры...</h1>

    </div>
</template>


<template id="word-selection">
    <div class="max-height">

        <div class="container">
            <div class="row">
                <div class="col-sm">
                    <h1>Выбор слова</h1>
                </div>
            </div>
            <div class="row">
                <div v-for="item in $parent.words" class="col-sm">
                    <button v-on:click="$parent.onChooseWord(item)" class="min-btn min-btn-gold">
                        {{item}}
                    </button>
                </div>
            </div>
        </div>        

    </div>
</template>


<template id="basic-drawing">
    <div class="max-height">

        <h1>{{$parent.chooseWord}}</h1>
        <h1>kek draw</h1>

    </div>
</template>


<script>
    Vue.component('room', {
        template: '#room',
        data: function () {
            return {
                gameId: 0,
                gameInfo: null,
                passwd: null,
                isShowPaswdWindow: false,
                roomHub: null,
                users: [],
                isAdmin: false,
                currentState: 'Waiting',
                words: [],
                chooseWord: null
            }
        },
        components: {
            'Waiting': {
                template: '#waiting',
                mounted() {
                    console.log(this);
                }
            },
            'WordSelection': {
                template: '#word-selection',
                mounted() {
                    console.log(this);
                }
            },
            'BasicDrawing': {
                template: '#basic-drawing',
                mounted() {
                    console.log(this);
                }
            }
        },
        async mounted() {
            app.showHideUserMenu(true);

            if (!this.initData())
                return;

            let hubConnection = app.createHubConnection('/hub/room');
            this.roomHub = hubConnection;

            hubConnection.on('InitGameInfo', this.initGameInfo);
            hubConnection.on('ClosePasswdWindow', this.closePasswdWindow);
            hubConnection.on('AddUser', this.addUser);
            hubConnection.on('RemoveUser', this.removeUser);
            hubConnection.on('InitUsersList', this.initUsersList);
            hubConnection.on('GetAllUsersInRoom', this.getAllUsersInRoom);
            hubConnection.on('SetUserAva', this.setUserAva);
            hubConnection.on('InstallAsAnAdmin', this.installAsAnAdmin);
            hubConnection.on('SetGameState', this.setGameState);
            hubConnection.on('InitWords', this.initWords);
            hubConnection.on('SetChooseWord', this.setChooseWord);

            await hubConnection.start();

            await this.connectToGame();
        },
        destroyed() {
            setTimeout(() => this.roomHub.stop(), 100);
        },
        methods: {
            initData: function () {
                let id = parseInt(app.getLocationParam('id'));

                if (isNaN(id) || id < 1) {
                    app.showErrorMessage("Такой комнаты не существует");
                    app.switchPage("hub");
                    return false;
                }

                this.gameId = id;
                return true;
            },
            connectToGame: async function () {
                await this.roomHub.invoke("GetGameInfo", this.gameId);

                if (this.gameInfo == null)
                    return;

                if (this.gameInfo.isPrivate) {
                    if (app.paramsObject) {
                        await this.roomHub.invoke("Connect", { id: this.gameId, obj: app.paramsObject });
                        app.paramsObject = null;
                    }
                    else
                        this.isShowPaswdWindow = true;
                }
                else
                    await this.roomHub.invoke("Connect", { id: this.gameId, obj: null });
            },
            onOkPaswdWindow: function () {
                this.roomHub.invoke("Connect", { id: this.gameId, obj: this.passwd });
            },
            onStartGameBtn: function () {
                this.roomHub.invoke("StartGame", this.gameId);
            },
            onChooseWord: function (word) {
                this.roomHub.invoke("ChooseWord", { id: this.gameId, obj: word });
            },


            setGameState: function (state) {
                this.currentState = state;
            },
            setChooseWord: function (word) {
                this.chooseWord = word;
            },
            initWords: function (words) {
                this.words.splice(0, this.words.length);

                for (let i in words) {
                    this.words.push(words[i]);
                }
            },
            initGameInfo: function (info) {
                this.gameInfo = info;
            },
            closePasswdWindow: function () {
                this.isShowPaswdWindow = false;
            },
            addUser: function (user) {
                user.userAva = null;
                this.users.push(user);
                this.roomHub.invoke("GetUserAva", { id: this.gameId, obj: user.id });
            },
            removeUser: function (user) {
                let i = this.users.findIndex(x => x.id == user.id);
                if (i > -1) {
                    this.users.splice(i, 1);
                }
            },
            initUsersList: function (users) {
                for (let i in users) {
                    this.addUser(users[i]);
                }
            },
            setUserAva: function (userAva) {
                this.users.find(x => x.id == userAva.id).userAva = userAva.ava;
            },
            getAllUsersInRoom: function () {
                this.roomHub.invoke("GetAllUsersInRoom", this.gameId);
            },
            installAsAnAdmin: function () {
                this.isAdmin = true;
            }
        }
    })
</script>
